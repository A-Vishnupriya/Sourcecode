Sort an array of 0s, 1s and 2s | Dutch National Flag problem
Last Updated : 02 Sep, 2024
Given an array A[] consisting of only 0s, 1s, and 2s. The task is to sort the array, i.e., put all 0s first, then all 1s and all 2s in last.

This problem is the same as the famous “Dutch National Flag problem”. The problem was proposed by Edsger Dijkstra. The problem is as follows:

Given N balls of colour red, white or blue arranged in a line in random order. You have to arrange all the balls such that the balls with the same colours are adjacent with the order of the balls, with the order of the colours being red, white and blue (i.e., all red coloured balls come first then the white coloured balls and then the blue coloured balls).

Examples:

Input: {0, 1, 2, 0, 1, 2}
Output: {0, 0, 1, 1, 2, 2}
Explanation: {0, 0, 1, 1, 2, 2} has all 0s first, then all 1s and all 2s in last.


Input: {0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1}
Output: {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2}
Explanation: {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2} has all 0s first, then all 1s and all 2s in last.

[Naive Approach] Sorting – O(N * log(N)) Time and O(1) Space:
The naive solution is to simply sort the array using a standard sorting algorithm or sort library function. This will simply place all the 0s first, then all 1s and 2s at last. This approach requires O(N * log(N)) time and O(1) space.

[Better Approach] Counting 0s, 1s and 2s – Two Pass – O(N) Time and O(1) Space:
A better solution is to traverse the array once and count number of 0s, 1s and 2s. Let these counts be c0, c1 and c2. Now traverse the array again, put c0 (count of 0s) 0s first, then c1 1s and finally c2 2s. This solution works in O(n) time, but this solution is not stable and requires two traversals of the array. This approach requires to traverse the array twice, therefore O(N) time and O(1) space.


// Java Program to sort an array of 0s, 1s and 2s

class GFG {
    // Function to sort the array of 0s, 1s and 2s
    public static void sort012(int a[], int n)
    {
        // code here
        int c0 = 0, c1 = 0, c2 = 0;

        // Count 0s, 1s and 2s
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                c0 += 1;
            }
            else if (a[i] == 1) {
                c1 += 1;
            }
            else {
                c2 += 1;
            }
        }

        int idx = 0;
        // Place all the 0s
        for (int i = 0; i < c0; i++)
            a[idx++] = 0;

        // Place all the 1s
        for (int i = 0; i < c1; i++)
            a[idx++] = 1;

        // Place all the 2s
        for (int i = 0; i < c2; i++)
            a[idx++] = 2;
    }
    public static void main(String[] args)
    {
        // Sample Input
        int[] a = { 0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1 };
        int n = a.length;

        sort012(a, n);

        for (int i = 0; i < n; i++)
            System.out.print(a[i] + " ");
    }
}
